/* automatically generated by rust-bindgen 0.68.1 */

extern "C" {
    pub fn USBD_GetUSBDIVersion(VersionInformation: PUSBD_VERSION_INFORMATION);
}
extern "C" {
    pub fn USBD_ParseConfigurationDescriptor(
        ConfigurationDescriptor: PUSB_CONFIGURATION_DESCRIPTOR,
        InterfaceNumber: UCHAR,
        AlternateSetting: UCHAR,
    ) -> PUSB_INTERFACE_DESCRIPTOR;
}
extern "C" {
    pub fn USBD_CreateConfigurationRequest(
        ConfigurationDescriptor: PUSB_CONFIGURATION_DESCRIPTOR,
        Siz: PUSHORT,
    ) -> PURB;
}
extern "C" {
    pub fn USBD_ParseDescriptors(
        DescriptorBuffer: PVOID,
        TotalLength: ULONG,
        StartPosition: PVOID,
        DescriptorType: LONG,
    ) -> PUSB_COMMON_DESCRIPTOR;
}
extern "C" {
    pub fn USBD_ParseConfigurationDescriptorEx(
        ConfigurationDescriptor: PUSB_CONFIGURATION_DESCRIPTOR,
        StartPosition: PVOID,
        InterfaceNumber: LONG,
        AlternateSetting: LONG,
        InterfaceClass: LONG,
        InterfaceSubClass: LONG,
        InterfaceProtocol: LONG,
    ) -> PUSB_INTERFACE_DESCRIPTOR;
}
extern "C" {
    pub fn USBD_CreateConfigurationRequestEx(
        ConfigurationDescriptor: PUSB_CONFIGURATION_DESCRIPTOR,
        InterfaceList: PUSBD_INTERFACE_LIST_ENTRY,
    ) -> PURB;
}
extern "C" {
    pub fn USBD_GetInterfaceLength(
        InterfaceDescriptor: PUSB_INTERFACE_DESCRIPTOR,
        BufferEnd: PUCHAR,
    ) -> ULONG;
}
extern "C" {
    pub fn USBD_RegisterHcFilter(
        DeviceObject: PDEVICE_OBJECT,
        FilterDeviceObject: PDEVICE_OBJECT,
    );
}
extern "C" {
    #[must_use]
    pub fn USBD_GetPdoRegistryParameter(
        PhysicalDeviceObject: PDEVICE_OBJECT,
        Parameter: PVOID,
        ParameterLength: ULONG,
        KeyName: PWSTR,
        KeyNameLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn USBD_QueryBusTime(
        RootHubPdo: PDEVICE_OBJECT,
        CurrentFrame: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn USBD_CalculateUsbBandwidth(
        MaxPacketSize: ULONG,
        EndpointType: UCHAR,
        LowSpeed: BOOLEAN,
    ) -> ULONG;
}
extern "C" {
    pub fn USBD_ValidateConfigurationDescriptor(
        ConfigDesc: PUSB_CONFIGURATION_DESCRIPTOR,
        BufferLength: ULONG,
        Level: USHORT,
        Offset: *mut PUCHAR,
        Tag: ULONG,
    ) -> USBD_STATUS;
}
extern "C" {
    #[must_use]
    pub fn USBD_CreateHandle(
        DeviceObject: PDEVICE_OBJECT,
        TargetDeviceObject: PDEVICE_OBJECT,
        USBDClientContractVersion: ULONG,
        PoolTag: ULONG,
        USBDHandle: *mut USBD_HANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn USBD_CloseHandle(USBDHandle: USBD_HANDLE);
}
extern "C" {
    pub fn USBD_IsInterfaceVersionSupported(
        USBDHandle: USBD_HANDLE,
        USBDInterfaceVersion: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn USBD_UrbAllocate(USBDHandle: USBD_HANDLE, Urb: *mut PURB) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn USBD_IsochUrbAllocate(
        USBDHandle: USBD_HANDLE,
        NumberOfIsochPackets: ULONG,
        Urb: *mut PURB,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn USBD_UrbFree(USBDHandle: USBD_HANDLE, Urb: PURB);
}
extern "C" {
    #[must_use]
    pub fn USBD_SelectConfigUrbAllocateAndBuild(
        USBDHandle: USBD_HANDLE,
        ConfigurationDescriptor: PUSB_CONFIGURATION_DESCRIPTOR,
        InterfaceList: PUSBD_INTERFACE_LIST_ENTRY,
        Urb: *mut PURB,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn USBD_SelectInterfaceUrbAllocateAndBuild(
        USBDHandle: USBD_HANDLE,
        ConfigurationHandle: USBD_CONFIGURATION_HANDLE,
        InterfaceListEntry: PUSBD_INTERFACE_LIST_ENTRY,
        Urb: *mut PURB,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn USBD_AssignUrbToIoStackLocation(
        USBDHandle: USBD_HANDLE,
        IoStackLocation: PIO_STACK_LOCATION,
        Urb: PURB,
    );
}
extern "C" {
    #[must_use]
    pub fn USBD_QueryUsbCapability(
        USBDHandle: USBD_HANDLE,
        CapabilityType: *const GUID,
        OutputBufferLength: ULONG,
        OutputBuffer: PUCHAR,
        ResultLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn USBD_BuildRegisterCompositeDevice(
        USBDHandle: USBD_HANDLE,
        CapabilityFlags: COMPOSITE_DEVICE_CAPABILITIES,
        FunctionCount: ULONG,
        RegisterCompositeDevice: PREGISTER_COMPOSITE_DEVICE,
    );
}
