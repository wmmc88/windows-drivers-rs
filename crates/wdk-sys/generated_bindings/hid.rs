/* automatically generated by rust-bindgen 0.68.1 */

extern "C" {
    #[must_use]
    pub fn HidRegisterMinidriver(
        MinidriverRegistration: PHID_MINIDRIVER_REGISTRATION,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidNotifyPresence(
        DeviceObject: PDEVICE_OBJECT,
        IsPresent: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_GetCaps(
        PreparsedData: PHIDP_PREPARSED_DATA,
        Capabilities: PHIDP_CAPS,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_GetLinkCollectionNodes(
        LinkCollectionNodes: PHIDP_LINK_COLLECTION_NODE,
        LinkCollectionNodesLength: PULONG,
        PreparsedData: PHIDP_PREPARSED_DATA,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_GetSpecificButtonCaps(
        ReportType: HIDP_REPORT_TYPE,
        UsagePage: USAGE,
        LinkCollection: USHORT,
        Usage: USAGE,
        ButtonCaps: PHIDP_BUTTON_CAPS,
        ButtonCapsLength: PUSHORT,
        PreparsedData: PHIDP_PREPARSED_DATA,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_GetButtonCaps(
        ReportType: HIDP_REPORT_TYPE,
        ButtonCaps: PHIDP_BUTTON_CAPS,
        ButtonCapsLength: PUSHORT,
        PreparsedData: PHIDP_PREPARSED_DATA,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_GetSpecificValueCaps(
        ReportType: HIDP_REPORT_TYPE,
        UsagePage: USAGE,
        LinkCollection: USHORT,
        Usage: USAGE,
        ValueCaps: PHIDP_VALUE_CAPS,
        ValueCapsLength: PUSHORT,
        PreparsedData: PHIDP_PREPARSED_DATA,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_GetValueCaps(
        ReportType: HIDP_REPORT_TYPE,
        ValueCaps: PHIDP_VALUE_CAPS,
        ValueCapsLength: PUSHORT,
        PreparsedData: PHIDP_PREPARSED_DATA,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_GetExtendedAttributes(
        ReportType: HIDP_REPORT_TYPE,
        DataIndex: USHORT,
        PreparsedData: PHIDP_PREPARSED_DATA,
        Attributes: PHIDP_EXTENDED_ATTRIBUTES,
        LengthAttributes: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_InitializeReportForID(
        ReportType: HIDP_REPORT_TYPE,
        ReportID: UCHAR,
        PreparsedData: PHIDP_PREPARSED_DATA,
        Report: PCHAR,
        ReportLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_SetData(
        ReportType: HIDP_REPORT_TYPE,
        DataList: PHIDP_DATA,
        DataLength: PULONG,
        PreparsedData: PHIDP_PREPARSED_DATA,
        Report: PCHAR,
        ReportLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_GetData(
        ReportType: HIDP_REPORT_TYPE,
        DataList: PHIDP_DATA,
        DataLength: PULONG,
        PreparsedData: PHIDP_PREPARSED_DATA,
        Report: PCHAR,
        ReportLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn HidP_MaxDataListLength(
        ReportType: HIDP_REPORT_TYPE,
        PreparsedData: PHIDP_PREPARSED_DATA,
    ) -> ULONG;
}
extern "C" {
    #[must_use]
    pub fn HidP_SetUsages(
        ReportType: HIDP_REPORT_TYPE,
        UsagePage: USAGE,
        LinkCollection: USHORT,
        UsageList: PUSAGE,
        UsageLength: PULONG,
        PreparsedData: PHIDP_PREPARSED_DATA,
        Report: PCHAR,
        ReportLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_UnsetUsages(
        ReportType: HIDP_REPORT_TYPE,
        UsagePage: USAGE,
        LinkCollection: USHORT,
        UsageList: PUSAGE,
        UsageLength: PULONG,
        PreparsedData: PHIDP_PREPARSED_DATA,
        Report: PCHAR,
        ReportLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_GetUsages(
        ReportType: HIDP_REPORT_TYPE,
        UsagePage: USAGE,
        LinkCollection: USHORT,
        UsageList: PUSAGE,
        UsageLength: PULONG,
        PreparsedData: PHIDP_PREPARSED_DATA,
        Report: PCHAR,
        ReportLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_GetUsagesEx(
        ReportType: HIDP_REPORT_TYPE,
        LinkCollection: USHORT,
        ButtonList: PUSAGE_AND_PAGE,
        UsageLength: *mut ULONG,
        PreparsedData: PHIDP_PREPARSED_DATA,
        Report: PCHAR,
        ReportLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn HidP_MaxUsageListLength(
        ReportType: HIDP_REPORT_TYPE,
        UsagePage: USAGE,
        PreparsedData: PHIDP_PREPARSED_DATA,
    ) -> ULONG;
}
extern "C" {
    #[must_use]
    pub fn HidP_SetUsageValue(
        ReportType: HIDP_REPORT_TYPE,
        UsagePage: USAGE,
        LinkCollection: USHORT,
        Usage: USAGE,
        UsageValue: ULONG,
        PreparsedData: PHIDP_PREPARSED_DATA,
        Report: PCHAR,
        ReportLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_SetScaledUsageValue(
        ReportType: HIDP_REPORT_TYPE,
        UsagePage: USAGE,
        LinkCollection: USHORT,
        Usage: USAGE,
        UsageValue: LONG,
        PreparsedData: PHIDP_PREPARSED_DATA,
        Report: PCHAR,
        ReportLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_SetUsageValueArray(
        ReportType: HIDP_REPORT_TYPE,
        UsagePage: USAGE,
        LinkCollection: USHORT,
        Usage: USAGE,
        UsageValue: PCHAR,
        UsageValueByteLength: USHORT,
        PreparsedData: PHIDP_PREPARSED_DATA,
        Report: PCHAR,
        ReportLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_GetUsageValue(
        ReportType: HIDP_REPORT_TYPE,
        UsagePage: USAGE,
        LinkCollection: USHORT,
        Usage: USAGE,
        UsageValue: PULONG,
        PreparsedData: PHIDP_PREPARSED_DATA,
        Report: PCHAR,
        ReportLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_GetScaledUsageValue(
        ReportType: HIDP_REPORT_TYPE,
        UsagePage: USAGE,
        LinkCollection: USHORT,
        Usage: USAGE,
        UsageValue: PLONG,
        PreparsedData: PHIDP_PREPARSED_DATA,
        Report: PCHAR,
        ReportLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_GetUsageValueArray(
        ReportType: HIDP_REPORT_TYPE,
        UsagePage: USAGE,
        LinkCollection: USHORT,
        Usage: USAGE,
        UsageValue: PCHAR,
        UsageValueByteLength: USHORT,
        PreparsedData: PHIDP_PREPARSED_DATA,
        Report: PCHAR,
        ReportLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_UsageListDifference(
        PreviousUsageList: PUSAGE,
        CurrentUsageList: PUSAGE,
        BreakUsageList: PUSAGE,
        MakeUsageList: PUSAGE,
        UsageListLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_UsageAndPageListDifference(
        PreviousUsageList: PUSAGE_AND_PAGE,
        CurrentUsageList: PUSAGE_AND_PAGE,
        BreakUsageList: PUSAGE_AND_PAGE,
        MakeUsageList: PUSAGE_AND_PAGE,
        UsageListLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_GetButtonArray(
        ReportType: HIDP_REPORT_TYPE,
        UsagePage: USAGE,
        LinkCollection: USHORT,
        Usage: USAGE,
        ButtonData: PHIDP_BUTTON_ARRAY_DATA,
        ButtonDataLength: PUSHORT,
        PreparsedData: PHIDP_PREPARSED_DATA,
        Report: PCHAR,
        ReportLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_SetButtonArray(
        ReportType: HIDP_REPORT_TYPE,
        UsagePage: USAGE,
        LinkCollection: USHORT,
        Usage: USAGE,
        ButtonData: PHIDP_BUTTON_ARRAY_DATA,
        ButtonDataLength: USHORT,
        PreparsedData: PHIDP_PREPARSED_DATA,
        Report: PCHAR,
        ReportLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_TranslateUsageAndPagesToI8042ScanCodes(
        ChangedUsageList: PUSAGE_AND_PAGE,
        UsageListLength: ULONG,
        KeyAction: HIDP_KEYBOARD_DIRECTION,
        ModifierState: PHIDP_KEYBOARD_MODIFIER_STATE,
        InsertCodesProcedure: PHIDP_INSERT_SCANCODES,
        InsertCodesContext: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HidP_TranslateUsagesToI8042ScanCodes(
        ChangedUsageList: PUSAGE,
        UsageListLength: ULONG,
        KeyAction: HIDP_KEYBOARD_DIRECTION,
        ModifierState: PHIDP_KEYBOARD_MODIFIER_STATE,
        InsertCodesProcedure: PHIDP_INSERT_SCANCODES,
        InsertCodesContext: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn HidD_GetAttributes(
        HidDeviceObject: HANDLE,
        Attributes: PHIDD_ATTRIBUTES,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn HidD_GetHidGuid(HidGuid: LPGUID);
}
extern "C" {
    pub fn HidD_GetPreparsedData(
        HidDeviceObject: HANDLE,
        PreparsedData: *mut PHIDP_PREPARSED_DATA,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn HidD_FreePreparsedData(PreparsedData: PHIDP_PREPARSED_DATA) -> BOOLEAN;
}
extern "C" {
    pub fn HidD_FlushQueue(HidDeviceObject: HANDLE) -> BOOLEAN;
}
extern "C" {
    pub fn HidD_GetConfiguration(
        HidDeviceObject: HANDLE,
        Configuration: PHIDD_CONFIGURATION,
        ConfigurationLength: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn HidD_SetConfiguration(
        HidDeviceObject: HANDLE,
        Configuration: PHIDD_CONFIGURATION,
        ConfigurationLength: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn HidD_GetFeature(
        HidDeviceObject: HANDLE,
        ReportBuffer: PVOID,
        ReportBufferLength: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn HidD_SetFeature(
        HidDeviceObject: HANDLE,
        ReportBuffer: PVOID,
        ReportBufferLength: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn HidD_GetInputReport(
        HidDeviceObject: HANDLE,
        ReportBuffer: PVOID,
        ReportBufferLength: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn HidD_SetOutputReport(
        HidDeviceObject: HANDLE,
        ReportBuffer: PVOID,
        ReportBufferLength: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn HidD_GetNumInputBuffers(
        HidDeviceObject: HANDLE,
        NumberBuffers: PULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn HidD_SetNumInputBuffers(
        HidDeviceObject: HANDLE,
        NumberBuffers: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn HidD_GetPhysicalDescriptor(
        HidDeviceObject: HANDLE,
        Buffer: PVOID,
        BufferLength: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn HidD_GetManufacturerString(
        HidDeviceObject: HANDLE,
        Buffer: PVOID,
        BufferLength: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn HidD_GetProductString(
        HidDeviceObject: HANDLE,
        Buffer: PVOID,
        BufferLength: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn HidD_GetIndexedString(
        HidDeviceObject: HANDLE,
        StringIndex: ULONG,
        Buffer: PVOID,
        BufferLength: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn HidD_GetSerialNumberString(
        HidDeviceObject: HANDLE,
        Buffer: PVOID,
        BufferLength: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn HidD_GetMsGenreDescriptor(
        HidDeviceObject: HANDLE,
        Buffer: PVOID,
        BufferLength: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn VhfCreate(VhfConfig: PVHF_CONFIG, VhfHandle: *mut VHFHANDLE) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn VhfStart(VhfHandle: VHFHANDLE) -> NTSTATUS;
}
extern "C" {
    pub fn VhfDelete(VhfHandle: VHFHANDLE, Wait: BOOLEAN);
}
extern "C" {
    #[must_use]
    pub fn VhfReadReportSubmit(
        VhfHandle: VHFHANDLE,
        HidTransferPacket: PHID_XFER_PACKET,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn VhfAsyncOperationComplete(
        VhfOperationHandle: VHFOPERATIONHANDLE,
        CompletionStatus: NTSTATUS,
    ) -> NTSTATUS;
}
